Documentation for Orbital Project: Wut 2 Do?

Database:
'get_mrt' folder contains code that generates all the latitude and longitude of all the MRT stations in Singapore. This is used by 'main\output' to generate the search results. Since only up to 60 results can be generated in 1 setting, by limiting each search to the latitude and longitude of all MRT stations, we are likely to generate < 60 results per setting, thus being able to get a more complete search and database.
'text_files' folder contains various text files that are required by 'main\output', for e.g, 'latlong.txt' is generated by 'get_mrt' to be used to generate search results. 
'database_main' contains 2 major subfolders. 'generate' uses Google API to generate the search results of the various categories, and places them into the database. 'output' receives the input from the app and returns the right output accordingly.

Major Decisions:
The format of this portion of the document will be as follow: 
Category:
Decision:
Rationale:

UI
Remove back button
https://developer.android.com/training/implementing-navigation/temporal.html 
The above link states that “All Android devices provide a Back button for this type of navigation, so your app should not add a Back button to the UI”. Thus the decision to remove back button.

Database 
Migrated from freesqldatabase.com to 000webhost.com
000webhost.com allows for database hosting and uploading of .php files, unlike freesqldatabase.com which only allows for database hosting. This allows the Android app to retrieve data from database.

Database
Using Text Search API instead of Radar Search
Radar Search, though it can generate up to 200 results (compared to Text Search, which can generate only up to 60 results, which may therefore result in some locations being missed out if the max of 60 results is reached), but the results generated can be quite inaccurate. As such, the plan now is to use Text Search API and loop through all the MRT stations in Singapore, so that it is less likely to hit the maximum of 60 results.

Database
Includes latitude & longitude in the table 'building'.
To facilitate generating the distance between user and the locations in the app. Initial decision was to generate everything on the app after the user has selected the category. However we realised that this is less efficient as we have to connect to Google API to generate the results first before being able to display them.

Linking between Android and PHP database
When switching activity, the keyword will be passed along to the next page and be appended to a PHP URL so that the required information can be downloaded i.e GET method.
GET method is chosen over the POST method as the data sent over to the database is not required to be secure.

Database
Using Google Maps and Google Places API to generate database instead of sourcing from Yellow Pages etc. This is because we took too long learning how to generate data from online sources, and Google API provides one of the most updated source of data. Ideally we should have used different sources of data, but due to the lack of time, we only used Google API.

Database
Using database to store past user searches instead of storing it locally on user's phone.
Upon trying to store user's past searches on user's phone, we realised that upon user log out, these information are lost. As such we decided to move them to database instead.

PHP API:
getCategory($genre)
pre: retrieves genre from user input
post: returns an array containing the names of categories

getDetailsOfActivity($category, $user_lat_long)
pre: retrieves category from user input and user's coordinates
post: returns a sorted array (descending order, distance from user) that containing all details of activity (i.e results) that includes:
shop_name, address, distance_from_user, tel_num, website, reviews_avg, lat_long

getAllDetails($user_lat_long)
pre: retrieves user coordinates
post: returns a sorted array (descending order, distance from user) that containing all details of activity (i.e results) that includes:
shop_name, address, distance_from_user, tel_num, website, reviews_avg, lat_long

getSearch($search, $user_lat_long)
pre: receives search result from user input and user's coordinates
post: returns a sorted array (descending order, distance from user) that containing all details of activity (i.e results) that includes:
shop_name, address, distance_from_user, tel_num, website, reviews_avg, lat_long. If search has no results, return an empty array.

getReviews($postal_code, $unit_no)
pre: retrieves postal_code and unit_no of location
post: returns an array of reviews in descending order of the review date.

Things we should have improved on:
1. Should have found more ways to implement certain functions so that we can choose the methods that are more efficient.
2. Modularize code more and create more functions so as to prevent too many copy and paste as well as mass editing of certain functions.
3. Add more comments to make code more readable.
